{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A debug toolbar for FastAPI based on the original django-debug-toolbar.</p> <p>Swagger UI &amp; GraphQL are supported.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi-debug-toolbar\n</code></pre> <p>Info</p> <p>The following packages are automatically installed:</p> <ul> <li>Jinja2 for toolbar templates.</li> <li>pyinstrument for profiling support.</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Add <code>DebugToolbarMiddleware</code> middleware to your FastAPI application:</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\n\napp = FastAPI(debug=True)\napp.add_middleware(DebugToolbarMiddleware)\n</code></pre>"},{"location":"#how-it-works","title":"How it works","text":"<p>Once installed, the debug toolbar tab is displayed on the right side of any html page, just click on it to open the navbar.</p> <p>The debug toolbar can be used with Swagger UI or GraphiQL and it is automatically updated after any request using a cookie-based system.</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#063","title":"0.6.3","text":"<ul> <li>Added support to SQLAlchemy <code>AsyncSession</code> and multiple binds</li> </ul>"},{"location":"changelog/#062","title":"0.6.2","text":"<ul> <li>SQLAlchemyPanel: Handled HTTPException from dependencies</li> <li>Removed pydantic future annotations</li> </ul>"},{"location":"changelog/#061","title":"0.6.1","text":"<ul> <li>Removed deprecated <code>fastapi_astack</code> scope</li> <li>Fixed <code>0.6</code> release tag.</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>SQLAlchemyPanel: Added <code>async_exit_stack</code> arg to <code>solve_dependencies</code> function </li> <li>DebugToolbarMiddleware: Removed <code>settings.ALLOWED_IPS</code> in favor of <code>settings.ALLOWED_HOSTS</code></li> <li>VersionsPanel: Removed <code>pkg_resources</code> in favor of <code>importlib.metadata</code></li> <li>Added ruff and bandit and removed black and isort</li> <li>Removed deprecated <code>on_event</code></li> <li>Added minor improvements</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Added Pydantic v2 support</li> <li>Removed Pydantic v1 support</li> <li>Removed <code>PydanticPanel</code></li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>Fixed middleware <code>url_path_for</code></li> <li>Improved SQLAlchemy panel</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<ul> <li>Fixed response body stream</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<ul> <li>Fixed pyproject.toml, added package data</li> <li>Improved panel templates</li> <li>Fixed profiling on Safari browser</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<ul> <li>Added refresh cookie system and <code>JSON.parse</code> swap removed</li> <li>Fixed SQL query encoding</li> <li>Fixed <code>SQLAlchemyPanel</code> , added missing <code>fastapi_astack</code> to scope (<code>fastapi &gt;= 0.74.0</code>)</li> <li>Added <code>SQLAlchemyPanel.add_engines</code> method</li> <li>Added <code>tortoise-orm &gt;= 0.19.0</code> support</li> <li>Fixed <code>VersionsPanel</code> JS, package home can be null</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":"<ul> <li>Added <code>PydanticPanel</code></li> <li>Removed <code>current_thread</code> in favor of <code>get_ident</code></li> <li>Added anyio task groups</li> <li>Removed <code>get_running_loop</code> in favor of <code>get_event_loop</code></li> <li>Improved tables styles</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>Fixed <code>ThreadPoolExecutor</code> for all sync endpoints</li> <li>Added cookie-based refresh</li> <li>Added exception handling for dependency resolution</li> <li>Added minor improvements to <code>VersionPanel</code></li> </ul>"},{"location":"changelog/#013","title":"0.1.3","text":"<ul> <li>Added <code>TortoisePanel</code></li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":"<ul> <li>Removed SQL compiled query in favor of statement params</li> <li>Added SQLAlchemy unregister</li> <li>Added <code>SQLPanel</code> base class</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<ul> <li>Improved dependency resolution</li> <li>Added minor improvements</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Added <code>SQLAlchemyPanel</code></li> <li>Added <code>LOGGING_COLORS</code> to panel templates</li> <li>Minor improvements</li> </ul>"},{"location":"changelog/#006","title":"0.0.6","text":"<ul> <li>Improved <code>VersionsPanel</code> script</li> <li>Added docs</li> </ul>"},{"location":"changelog/#005","title":"0.0.5","text":"<ul> <li>Fixed multiple profilers on the same thread</li> <li>Fixed <code>VersionsPanel</code> Pypi url</li> </ul>"},{"location":"changelog/#004","title":"0.0.4","text":"<ul> <li>Added pypi details to <code>VersionsPanel</code></li> <li>Improved assets</li> <li>Added <code>LOGGING_COLORS</code></li> <li>Highlighted matched endpoint</li> </ul>"},{"location":"changelog/#003","title":"0.0.3","text":"<ul> <li>Sorted routes by path</li> </ul>"},{"location":"changelog/#002","title":"0.0.2","text":"<ul> <li>Added mounted apps support (e.g. ariadne.asgi.GraphQL)</li> </ul>"},{"location":"changelog/#001","title":"0.0.1","text":"<ul> <li>\ud83d\udce6</li> </ul>"},{"location":"settings/","title":"Settings","text":"<p>Here's a list of settings available:</p> Source code in <code>debug_toolbar/settings.py</code> <pre><code>class DebugToolbarSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        title=\"Debug Toolbar\",\n        env_prefix=\"DT_\",\n        case_sensitive=False,\n    )\n\n    DEFAULT_PANELS: t.List[str] = Field(\n        [\n            \"debug_toolbar.panels.versions.VersionsPanel\",\n            \"debug_toolbar.panels.timer.TimerPanel\",\n            \"debug_toolbar.panels.settings.SettingsPanel\",\n            \"debug_toolbar.panels.request.RequestPanel\",\n            \"debug_toolbar.panels.headers.HeadersPanel\",\n            \"debug_toolbar.panels.routes.RoutesPanel\",\n            \"debug_toolbar.panels.logging.LoggingPanel\",\n            \"debug_toolbar.panels.profiling.ProfilingPanel\",\n            \"debug_toolbar.panels.redirects.RedirectsPanel\",\n        ],\n        description=(\n            \"Specifies the full Python path to each panel that you \"\n            \"want included in the toolbar.\"\n        ),\n    )\n    PANELS: t.List[str] = Field(\n        [],\n        description=(\n            \"A list of the full Python paths to each panel that you \"\n            \"want to append to `DEFAULT_PANELS`.\"\n        ),\n    )\n    DISABLE_PANELS: t.Sequence[str] = Field(\n        [\"debug_toolbar.panels.redirects.RedirectsPanel\"],\n        description=(\n            \"A list of the full Python paths to each panel that you \"\n            \"want disabled (but still displayed) by default.\"\n        ),\n    )\n    ALLOWED_HOSTS: t.Optional[t.Sequence[str]] = Field(\n        None,\n        description=(\n            \"If it's set, the Debug Toolbar is shown only \"\n            \"if the request host is listed.\"\n        ),\n    )\n    JINJA_ENV: Environment = Field(\n        Environment(autoescape=True),\n        description=\"The Jinja environment instance used to render the toolbar.\",\n    )\n    JINJA_LOADERS: t.List[BaseLoader] = Field(\n        [],\n        description=(\n            \"Jinja `BaseLoader` subclasses used to load templates \"\n            \"from the file system or other locations.\"\n        ),\n    )\n    JINJA_EXTENSIONS: t.Sequence[t.Union[str, t.Type[Extension]]] = Field(\n        [],\n        description=(\n            \"Load the extensions from the list and bind them to the Jinja environment.\"\n        ),\n    )\n    API_URL: str = Field(\n        \"/_debug_toolbar\",\n        description=\"URL prefix to use for toolbar endpoints.\",\n    )\n    STATIC_URL: str = Field(\n        f\"{API_URL.default}/static\",  # type: ignore[attr-defined]\n        description=\"URL to use when referring to toolbar static files.\",\n    )\n    SHOW_TOOLBAR_CALLBACK: str = Field(\n        \"debug_toolbar.middleware.show_toolbar\",\n        description=(\n            \"This is the dotted path to a function used for \"\n            \"determining whether the toolbar should show or not.\"\n        ),\n    )\n    INSERT_BEFORE: str = Field(\n        \"&lt;/body&gt;\",\n        description=(\n            \"The toolbar searches for this string in the HTML \"\n            \"and inserts itself just before.\"\n        ),\n    )\n    SHOW_COLLAPSE: bool = Field(\n        False,\n        description=\"If changed to `True`, the toolbar will be collapsed by default.\",\n    )\n    ROOT_TAG_EXTRA_ATTRS: str = Field(\n        \"\",\n        description=(\n            \"This setting is injected in the root template div \"\n            \"in order to avoid conflicts with client-side frameworks\"\n        ),\n    )\n    RESULTS_CACHE_SIZE: int = Field(\n        25,\n        description=\"The toolbar keeps up to this many results in memory.\",\n    )\n    PROFILER_OPTIONS: t.Dict[str, t.Any] = Field(\n        {\"interval\": 0.0001},\n        description=\"A list of arguments can be supplied to the Profiler.\",\n    )\n    SETTINGS: t.Sequence[BaseSettings] = Field(\n        [],\n        description=(\n            \"pydantic's `BaseSettings` instances to be \"\n            \"displayed on the `SettingsPanel`.\"\n        ),\n    )\n    LOGGING_COLORS: t.Dict[str, Color] = Field(\n        {\n            \"CRITICAL\": Color(\"rgba(255, 0, 0, .4)\"),\n            \"ERROR\": Color(\"rgba(255, 0, 0, .2)\"),\n            \"WARNING\": Color(\"rgba(255, 165, 0, .2)\"),\n            \"INFO\": Color(\"rgba(135, 206, 235, .2)\"),\n            \"DEBUG\": Color(\"rgba(128, 128, 128, .2)\"),\n        },\n        description=\"Color palette used to apply colors based on the log level.\",\n    )\n    SQL_WARNING_THRESHOLD: int = Field(\n        500,\n        description=(\n            \"The SQL panel highlights queries that took more that this amount of \"\n            \"time, in milliseconds, to execute.\"\n        ),\n    )\n\n    def __init__(self, **settings: t.Any) -&gt; None:\n        super().__init__(**settings)\n        loaders = self.JINJA_LOADERS + [PackageLoader(\"debug_toolbar\", \"templates\")]\n        self.JINJA_ENV.loader = ChoiceLoader(loaders)\n        self.JINJA_ENV.trim_blocks = True\n        self.JINJA_ENV.lstrip_blocks = True\n\n        for extension in self.JINJA_EXTENSIONS:\n            self.JINJA_ENV.add_extension(extension)\n\n    @model_validator(mode=\"before\")\n    def ci(cls, data: dict):\n        return {k.upper(): v for k, v in data.items()}\n</code></pre>"},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.ALLOWED_HOSTS","title":"<code>ALLOWED_HOSTS: t.Optional[t.Sequence[str]] = Field(None, description=\"If it's set, the Debug Toolbar is shown only if the request host is listed.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.API_URL","title":"<code>API_URL: str = Field('/_debug_toolbar', description='URL prefix to use for toolbar endpoints.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.DEFAULT_PANELS","title":"<code>DEFAULT_PANELS: t.List[str] = Field(['debug_toolbar.panels.versions.VersionsPanel', 'debug_toolbar.panels.timer.TimerPanel', 'debug_toolbar.panels.settings.SettingsPanel', 'debug_toolbar.panels.request.RequestPanel', 'debug_toolbar.panels.headers.HeadersPanel', 'debug_toolbar.panels.routes.RoutesPanel', 'debug_toolbar.panels.logging.LoggingPanel', 'debug_toolbar.panels.profiling.ProfilingPanel', 'debug_toolbar.panels.redirects.RedirectsPanel'], description='Specifies the full Python path to each panel that you want included in the toolbar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.DISABLE_PANELS","title":"<code>DISABLE_PANELS: t.Sequence[str] = Field(['debug_toolbar.panels.redirects.RedirectsPanel'], description='A list of the full Python paths to each panel that you want disabled (but still displayed) by default.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.INSERT_BEFORE","title":"<code>INSERT_BEFORE: str = Field('&lt;/body&gt;', description='The toolbar searches for this string in the HTML and inserts itself just before.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_ENV","title":"<code>JINJA_ENV: Environment = Field(Environment(autoescape=True), description='The Jinja environment instance used to render the toolbar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_EXTENSIONS","title":"<code>JINJA_EXTENSIONS: t.Sequence[t.Union[str, t.Type[Extension]]] = Field([], description='Load the extensions from the list and bind them to the Jinja environment.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.JINJA_LOADERS","title":"<code>JINJA_LOADERS: t.List[BaseLoader] = Field([], description='Jinja `BaseLoader` subclasses used to load templates from the file system or other locations.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.LOGGING_COLORS","title":"<code>LOGGING_COLORS: t.Dict[str, Color] = Field({'CRITICAL': Color('rgba(255, 0, 0, .4)'), 'ERROR': Color('rgba(255, 0, 0, .2)'), 'WARNING': Color('rgba(255, 165, 0, .2)'), 'INFO': Color('rgba(135, 206, 235, .2)'), 'DEBUG': Color('rgba(128, 128, 128, .2)')}, description='Color palette used to apply colors based on the log level.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.PANELS","title":"<code>PANELS: t.List[str] = Field([], description='A list of the full Python paths to each panel that you want to append to `DEFAULT_PANELS`.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.PROFILER_OPTIONS","title":"<code>PROFILER_OPTIONS: t.Dict[str, t.Any] = Field({'interval': 0.0001}, description='A list of arguments can be supplied to the Profiler.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.RESULTS_CACHE_SIZE","title":"<code>RESULTS_CACHE_SIZE: int = Field(25, description='The toolbar keeps up to this many results in memory.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.ROOT_TAG_EXTRA_ATTRS","title":"<code>ROOT_TAG_EXTRA_ATTRS: str = Field('', description='This setting is injected in the root template div in order to avoid conflicts with client-side frameworks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SETTINGS","title":"<code>SETTINGS: t.Sequence[BaseSettings] = Field([], description=\"pydantic's `BaseSettings` instances to be displayed on the `SettingsPanel`.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SHOW_COLLAPSE","title":"<code>SHOW_COLLAPSE: bool = Field(False, description='If changed to `True`, the toolbar will be collapsed by default.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SHOW_TOOLBAR_CALLBACK","title":"<code>SHOW_TOOLBAR_CALLBACK: str = Field('debug_toolbar.middleware.show_toolbar', description='This is the dotted path to a function used for determining whether the toolbar should show or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.SQL_WARNING_THRESHOLD","title":"<code>SQL_WARNING_THRESHOLD: int = Field(500, description='The SQL panel highlights queries that took more that this amount of time, in milliseconds, to execute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.STATIC_URL","title":"<code>STATIC_URL: str = Field(f'{API_URL.default}/static', description='URL to use when referring to toolbar static files.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"settings/#debug_toolbar.settings.DebugToolbarSettings.model_config","title":"<code>model_config = SettingsConfigDict(title='Debug Toolbar', env_prefix='DT_', case_sensitive=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"panels/default/","title":"Default panels","text":"<p>Here's a list of default panels available:</p>"},{"location":"panels/default/#versions","title":"Versions","text":""},{"location":"panels/default/#timer","title":"Timer","text":""},{"location":"panels/default/#settings","title":"Settings","text":"<p>Add your pydantic's BaseSettings classes to this panel:</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\nfrom pydantic import SecretStr\nfrom pydantic_settings import BaseSettings\n\n\nclass APISettings(BaseSettings):\n    SECRET_KEY: SecretStr\n\n\napp = FastAPI(debug=True)\napp.add_middleware(DebugToolbarMiddleware, settings=[APISettings()])\n</code></pre>"},{"location":"panels/default/#request","title":"Request","text":""},{"location":"panels/default/#headers","title":"Headers","text":""},{"location":"panels/default/#routes","title":"Routes","text":""},{"location":"panels/default/#logging","title":"Logging","text":""},{"location":"panels/default/#profiling","title":"Profiling","text":"<p>Profiling reports provided by Pyinstrument, you can configure the profiler parameters by adding <code>profiler_options</code> settings:</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\n\napp = FastAPI(debug=True)\napp.add_middleware(DebugToolbarMiddleware, profiler_options={'interval': .0002})\n</code></pre>"},{"location":"panels/dev/","title":"Development","text":""},{"location":"panels/dev/#first-steps","title":"First steps","text":"<p>Before writing your own panel you need to provide a Jinja loader instance used to load your templates from the file system or other locations.</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI(debug=True)\ntemplates = Jinja2Templates(directory=\"templates\")\n\napp.add_middleware(\n    DebugToolbarMiddleware,\n    panels=[\"panels.ExamplePanel\"],\n    jinja_loaders=[templates.env.loader],\n)\n</code></pre>"},{"location":"panels/dev/#create-a-panel","title":"Create a panel","text":"<p>Subclass <code>Panel</code> and override <code>generate_stats()</code> method to implement a custom panel on your <code>panels.py</code>. This method should return a dict with the panel stats.</p> <pre><code>from debug_toolbar.panels import Panel\n\n\nclass ExamplePanel(Panel):\n    title = \"Example Panel\"\n    template = \"example.html\"\n\n    async def process_request(self, request):\n        response = await super().process_request(request)\n        return response\n\n    async def generate_stats(self, request, response):\n        return {\"example\": \"value\"}\n</code></pre> <p>Tip</p> <p>The <code>process_request()</code> method is optional and particularly useful for adding behavior that occurs before the request is processed.</p> <p>Please see the Panel class reference for further details.</p>"},{"location":"panels/dev/#writing-the-template","title":"Writing the template","text":"<p>Create a template at <code>templates/example.html</code> to display your panel stats:</p> <pre><code>&lt;span&gt;{{ example }}&lt;/span&gt;\n</code></pre>"},{"location":"panels/panel/","title":"Panel","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>class Panel:\n    has_content: bool = True\n\n    def __init__(\n        self,\n        toolbar: \"DebugToolbar\",\n        call_next: RequestResponseEndpoint,\n    ) -&gt; None:\n        self.toolbar = toolbar\n        self.call_next = call_next\n\n    @property\n    def panel_id(self) -&gt; str:\n        return self.__class__.__name__\n\n    @property\n    def enabled(self) -&gt; bool:\n        disabled_panels = self.toolbar.settings.DISABLE_PANELS\n        panel_path = get_name_from_obj(self)\n\n        disable_panel = (\n            panel_path in disabled_panels\n            or panel_path.replace(\".panel.\", \".\") in disabled_panels\n        )\n        if disable_panel:\n            default = \"off\"\n        else:\n            default = \"on\"\n\n        return self.toolbar.request.cookies.get(f\"dt{self.panel_id}\", default) == \"on\"\n\n    @property\n    def nav_title(self) -&gt; str:\n        return self.title\n\n    @property\n    def nav_subtitle(self) -&gt; str:\n        return \"\"\n\n    @property\n    def title(self) -&gt; str:\n        raise NotImplementedError\n\n    @property\n    def template(self) -&gt; str:\n        raise NotImplementedError\n\n    @property\n    def content(self) -&gt; str:\n        if self.has_content:\n            return self.render(**self.get_stats())\n        return \"\"\n\n    def render(self, **context: t.Any) -&gt; str:\n        return self.toolbar.render(self.template, **context)\n\n    def url_for(self, name: str, **path_params: t.Any) -&gt; str:\n        return str(self.toolbar.request.url_for(name, **path_params))\n\n    @property\n    def scripts(self) -&gt; list[str]:\n        return []\n\n    async def process_request(self, request: Request) -&gt; Response:\n        return await self.call_next(request)\n\n    async def generate_stats(self, request: Request, response: Response) -&gt; Stats:\n        return {}\n\n    def get_stats(self) -&gt; Stats:\n        return self.toolbar.stats.get(self.panel_id, {})\n\n    async def record_stats(self, request: Request, response: Response) -&gt; None:\n        stats = await self.generate_stats(request, response)\n\n        if stats is not None:\n            self.toolbar.stats.setdefault(self.panel_id, {}).update(stats)\n\n    async def generate_server_timing(\n        self,\n        request: Request,\n        response: Response,\n    ) -&gt; ServerTiming:\n        return []\n\n    def get_server_timing_stats(self) -&gt; ServerTiming:\n        return self.toolbar.server_timing_stats.get(self.panel_id, [])\n\n    async def record_server_timing(self, request: Request, response: Response) -&gt; None:\n        stats = await self.generate_server_timing(request, response)\n\n        if stats is not None:\n            st_stats = self.toolbar.server_timing_stats.setdefault(self.panel_id, [])\n            st_stats += list(stats)\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.call_next","title":"<code>call_next = call_next</code>  <code>instance-attribute</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.content","title":"<code>content: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.enabled","title":"<code>enabled: bool</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.has_content","title":"<code>has_content: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.nav_subtitle","title":"<code>nav_subtitle: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.nav_title","title":"<code>nav_title: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.panel_id","title":"<code>panel_id: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.scripts","title":"<code>scripts: list[str]</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.template","title":"<code>template: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.title","title":"<code>title: str</code>  <code>property</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.toolbar","title":"<code>toolbar = toolbar</code>  <code>instance-attribute</code>","text":""},{"location":"panels/panel/#debug_toolbar.panels.Panel.__init__","title":"<code>__init__(toolbar, call_next)</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>def __init__(\n    self,\n    toolbar: \"DebugToolbar\",\n    call_next: RequestResponseEndpoint,\n) -&gt; None:\n    self.toolbar = toolbar\n    self.call_next = call_next\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.generate_server_timing","title":"<code>generate_server_timing(request, response)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>async def generate_server_timing(\n    self,\n    request: Request,\n    response: Response,\n) -&gt; ServerTiming:\n    return []\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.generate_stats","title":"<code>generate_stats(request, response)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>async def generate_stats(self, request: Request, response: Response) -&gt; Stats:\n    return {}\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.get_server_timing_stats","title":"<code>get_server_timing_stats()</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>def get_server_timing_stats(self) -&gt; ServerTiming:\n    return self.toolbar.server_timing_stats.get(self.panel_id, [])\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.get_stats","title":"<code>get_stats()</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>def get_stats(self) -&gt; Stats:\n    return self.toolbar.stats.get(self.panel_id, {})\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.process_request","title":"<code>process_request(request)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>async def process_request(self, request: Request) -&gt; Response:\n    return await self.call_next(request)\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.record_server_timing","title":"<code>record_server_timing(request, response)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>async def record_server_timing(self, request: Request, response: Response) -&gt; None:\n    stats = await self.generate_server_timing(request, response)\n\n    if stats is not None:\n        st_stats = self.toolbar.server_timing_stats.setdefault(self.panel_id, [])\n        st_stats += list(stats)\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.record_stats","title":"<code>record_stats(request, response)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>async def record_stats(self, request: Request, response: Response) -&gt; None:\n    stats = await self.generate_stats(request, response)\n\n    if stats is not None:\n        self.toolbar.stats.setdefault(self.panel_id, {}).update(stats)\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.render","title":"<code>render(**context)</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>def render(self, **context: t.Any) -&gt; str:\n    return self.toolbar.render(self.template, **context)\n</code></pre>"},{"location":"panels/panel/#debug_toolbar.panels.Panel.url_for","title":"<code>url_for(name, **path_params)</code>","text":"Source code in <code>debug_toolbar/panels/__init__.py</code> <pre><code>def url_for(self, name: str, **path_params: t.Any) -&gt; str:\n    return str(self.toolbar.request.url_for(name, **path_params))\n</code></pre>"},{"location":"panels/sql/","title":"SQL panels","text":""},{"location":"panels/sql/#sqlalchemy","title":"SQLAlchemy","text":"<p>Add the <code>SQLAlchemyPanel</code> to your panel list:</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\n\napp = FastAPI(debug=True)\n\napp.add_middleware(\n    DebugToolbarMiddleware,\n    panels=[\"debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel\"],\n)\n</code></pre> <p></p> <p>This panel records all queries using the \"Dependency Injection\" system as described in the FastAPI docs.</p> <p>If you don't use dependencies then create a new class that inherits from <code>SQLAlchemyPanel</code>, override the <code>add_engines</code> method and add the class path to your panel list:</p> <pre><code>from debug_toolbar.panels.sqlalchemy import SQLAlchemyPanel as BasePanel\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"sqlite://\", connect_args={\"check_same_thread\": False})\n\n\nclass SQLAlchemyPanel(BasePanel):\n    async def add_engines(self, request: Request):\n        self.engines.add(engine)\n</code></pre>"},{"location":"panels/sql/#debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel","title":"<code>debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel</code>","text":"Source code in <code>debug_toolbar/panels/sqlalchemy.py</code> <pre><code>class SQLAlchemyPanel(SQLPanel):\n    title = \"SQLAlchemy\"\n\n    def __init__(self, *args: t.Any, **kwargs: t.Any) -&gt; None:\n        super().__init__(*args, **kwargs)\n        self.engines: t.Set[Engine] = set()\n\n    def register(self, engine: Engine) -&gt; None:\n        event.listen(engine, \"before_cursor_execute\", self.before_execute, named=True)\n        event.listen(engine, \"after_cursor_execute\", self.after_execute, named=True)\n\n    def unregister(self, engine: Engine) -&gt; None:\n        event.remove(engine, \"before_cursor_execute\", self.before_execute)\n        event.remove(engine, \"after_cursor_execute\", self.after_execute)\n\n    def before_execute(self, context: ExecutionContext, **kwargs: t.Any) -&gt; None:\n        context._start_time = perf_counter()  # type: ignore[attr-defined]\n\n    def after_execute(self, context: ExecutionContext, **kwargs: t.Any) -&gt; None:\n        query = {\n            \"duration\": (\n                perf_counter() - context._start_time  # type: ignore[attr-defined]\n            )\n            * 1000,\n            \"sql\": context.statement,\n            \"params\": context.parameters,\n        }\n        self.add_query(str(context.engine.url), query)\n\n    def add_bind(self, bind: Connection | Engine):\n        if isinstance(bind, Connection):\n            self.engines.add(bind.engine)\n        else:\n            self.engines.add(bind)\n\n    async def add_engines(self, request: Request):\n        dependencies = await get_dependencies(request)\n\n        if dependencies is not None:\n            for value in dependencies.values():\n                if isinstance(value, AsyncSession):\n                    value = value.sync_session\n\n                if isinstance(value, Session):\n                    try:\n                        bind = value.get_bind()\n                    except UnboundExecutionError:\n                        for bind in value._Session__binds.values():  # type: ignore[attr-defined]\n                            self.add_bind(bind)\n                    else:\n                        self.add_bind(bind)\n\n    async def process_request(self, request: Request) -&gt; Response:\n        await self.add_engines(request)\n\n        for engine in self.engines:\n            self.register(engine)\n        try:\n            response = await super().process_request(request)\n        finally:\n            for engine in self.engines:\n                self.unregister(engine)\n        return response\n</code></pre>"},{"location":"panels/sql/#debug_toolbar.panels.sqlalchemy.SQLAlchemyPanel.add_engines","title":"<code>add_engines(request)</code>  <code>async</code>","text":"Source code in <code>debug_toolbar/panels/sqlalchemy.py</code> <pre><code>async def add_engines(self, request: Request):\n    dependencies = await get_dependencies(request)\n\n    if dependencies is not None:\n        for value in dependencies.values():\n            if isinstance(value, AsyncSession):\n                value = value.sync_session\n\n            if isinstance(value, Session):\n                try:\n                    bind = value.get_bind()\n                except UnboundExecutionError:\n                    for bind in value._Session__binds.values():  # type: ignore[attr-defined]\n                        self.add_bind(bind)\n                else:\n                    self.add_bind(bind)\n</code></pre>"},{"location":"panels/sql/#tortoise-orm","title":"Tortoise ORM","text":"<p>Add the <code>TortoisePanel</code> to your panel list:</p> <pre><code>from debug_toolbar.middleware import DebugToolbarMiddleware\nfrom fastapi import FastAPI\n\napp = FastAPI(debug=True)\n\napp.add_middleware(\n    DebugToolbarMiddleware,\n    panels=[\"debug_toolbar.panels.tortoise.TortoisePanel\"],\n)\n</code></pre>"}]}